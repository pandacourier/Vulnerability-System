#include "vulnerability.h"

Vulnerability::Vulnerability(int&& id, std::string&& name, std::string&& product, std::string&& company, short&& risk_level, int&& industry, std::set<int>&& type_exist, std::string&& description)
{
	_id = id;
	_name = name;
	_product = product;
	_company = company;
	_risk_level = risk_level;
	_industry = industry;
	_type_exist = type_exist;
	_description = description;
}

Vulnerability::~Vulnerability()
{

}

bool Vulnerability::init()			//作用是读取本地txt将漏洞类型和漏洞相关行业与数字互相转换
{
	std::ifstream ifs(".\\VulnerabilityType.txt");
	std::string str;
	int type;

	if (!ifs.is_open())				//漏洞类型
		return false;
	while (ifs >> str >> type)
		_vulnerability_name_to_type[str] = type,
		_vulnerability_type_to_name[type] = str;

	ifs.open(".\\IndustryType.txt");
	if (!ifs.is_open())				//漏洞行业
		return false;
	while (ifs >> str >> type)
		_industry_name_to_type[str] = type,
		_industry_type_to_name[type] = str;

	return true;
}

int Vulnerability::getID() const
{
	return _id;
}

std::string Vulnerability::getName() const
{
	return _name;
}

std::string Vulnerability::getProduct()const
{
	return _product;
}

std::string Vulnerability::getCompany()const
{
	return _company;
}

short Vulnerability::getRisk_level()const
{
	return _risk_level;
}

int Vulnerability::getIndustry()const
{
	return _industry;
}

std::set<int> Vulnerability::getType_exist()const
{
	return _type_exist;
}

std::string Vulnerability::getDescription() const
{
	return _description;
}

void Vulnerability::setID(int&& id)
{
	_id = id;
}

void Vulnerability::setName(std::string&& name)
{
	_name = name;
}

void Vulnerability::setProduct(std::string&& product)
{
	_product = product;
}

void Vulnerability::setCompany(std::string&& company)
{
	_company = company;
}

void Vulnerability::setRisk_level(short&& risk_level)
{
	_risk_level = risk_level;
}

void Vulnerability::setIndustry(int&& industry)
{
	_industry = industry;
}

void Vulnerability::setType_exist(std::set<int>&& type_exist)
{
	_type_exist = type_exist;
}

void Vulnerability::setDescription(std::string&& description)
{
	_description = description;//问问m这个是要返回啥
}

int Vulnerability::translateVulnerability(const std::string& name) const		//漏洞类型转换为数字
{
	return _vulnerability_name_to_type[name];
}

std::string Vulnerability::translateVulnerability(const int& type) const		//数字转换为漏洞类型
{
	return _vulnerability_type_to_name[type];
}

int Vulnerability::translateIndustry(const std::string& name) const				//漏洞行业转换为数字
{
	return _industry_name_to_type[name];
}

std::string Vulnerability::translateIndustry(const int& type) const				//数字转换为漏洞行业
{
	return _industry_type_to_name[type];
}
