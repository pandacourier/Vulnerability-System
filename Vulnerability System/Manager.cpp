#include "Manager.h"




Manager::Manager()
{
	_user = std::make_unique<User>();
	_vulnerability = std::make_unique<Vulnerability>();

}

Manager::~Manager()
{
	_user.reset();
}

bool Manager::login(std::string&& uid, std::string&& password)
{
	bool isExist = false;
	User temp(std::move(std::string(uid)), std::move(std::string(password)));

	/*
	 *		搜数据库
	 *		..........
	 *		..........
	 */

	if (isExist) 
		_user = std::make_unique<User>(std::move(temp));
	return isExist;
}

bool Manager::logout()
{
	bool isExit = false;

	_user = std::make_unique<User>();
	isExit = true;

	return isExit;
}

bool Manager::addUser(User&& new_user)
{
	//利用代理中的数据库实现函数
}

bool Manager::addVulnerability(Vulnerability&& new_vul)
{

}

bool Manager::deleteUser()
{
	
}

bool Manager::deleteVulnerability()
{

}

User Manager::queryUserInfo() const
{
	return *_user.get();
}

Vulnerability Manager::queryVulnerability() const
{

}

bool Manager::changeUser(User&& user)
{

}

bool Manager::modifyUserInfo(int type, std::string&& data)
{

}

bool Manager::changeVulnerability(Vulnerability&& vul)
{

}

bool Manager::modifyVulnerabilityInfo(int type, std::string&& data)
{

}