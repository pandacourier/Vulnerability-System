#pragma once
//该头文件用于定义漏洞初始条件
//漏洞类，用于定义一个漏洞的基础属性
#include "pch.h"

class Vulnerability
{
public:
	Vulnerability(
		int&& id,
		std::string&& name,
		std::string&& product,
		std::string&& company,
		short&& risk_level,
		int&& industry,
		std::set<int>&& type_exist,
		std::string&& description
	);
	~Vulnerability();
	bool init();	// 初始化映射

	int getID() const;
	std::string getName() const;
	std::string getProduct()const;
	std::string getCompany()const;
	short getRisk_level()const;
	int getIndustry()const;
	std::set<int> getType_exist()const;
	std::string getDescription() const;
	// 已加完

	void setID(int&& id);
	void setName(std::string&& name);
	void setProduct(std::string&& product);
	void setCompany(std::string&& company);
	void setRisk_level(short&& risk_level);
	void setIndustry(int&& industry);
	void setType_exist(std::set<int>&& type_exist);
	void setDescription(std::string&& description);
	// 加完了，set那个应该修改成增加tag和删除tag，具体可以看看set的合并之类操作，具体不清楚什么意思

	int translateVulnerability(const std::string& name) const;//漏洞类型转换为数字
	std::string translateVulnerability(const int& type) const;//数字转换为漏洞类型
	int translateIndustry(const std::string& name) const;//漏洞行业转换为数字
	std::string translateIndustry(const int& type) const;//数字转换为漏洞行业

private:
	static std::unordered_map<int, std::string> _vulnerability_type_to_name;
	static std::unordered_map<std::string, int> _vulnerability_name_to_type;
	static std::unordered_map<int, std::string> _industry_type_to_name;
	static std::unordered_map<std::string, int> _industry_name_to_type;

	int _id;
	std::string _name;
	std::string _product;
	std::string _company;
	short _risk_level;
	int _industry;
	std::set<int> _type_exist;
	std::string _description;
};