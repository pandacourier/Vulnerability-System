#include"proxy.h"


VulMysql::VulMysql(MYSQL&& mysql, MYSQL_RES* res, MYSQL_ROW&& row, std::string&& type)
{
	_mysql = mysql;
	_res = res;
	_row = row;
	_type = type;
	_user = std::make_unique<User>();
	_vulnerability = std::make_unique<Vulnerability>();
}

VulMysql::~VulMysql()
{

}

int VulMysql::ConnectMysql()
{
	//初始化数据库
	mysql_init(&_mysql);

	//设置字符编码
	mysql_options(&_mysql, MYSQL_SET_CHARSET_NAME, "utf8");
	//链接数据库
	if (mysql_real_connect(&_mysql, "127.0.0.1", "root",
		"root", "vul system", 3306, NULL, 0) == NULL) {
		printf("错误原因: %s\n", mysql_error(&_mysql));
		printf("连接失败！\n");
		exit(-1);
	}
}
// 运用重载实现不同功能，字符串拼接语句并传输进数据库实现sql语句查询

int VulMysql::InsertMysql(int&& id, std::string&& name, std::string&& product, std::string&& company, short&& risk_level, int&& industry, std::set<int>&& type_exist, std::string&& description)
{
	std::string type, risk, total;
	risk = _vulnerability.translateVulnerability(risk_level);
	type = _vulnerability.translateVulnerability(type_exist);
	total = id + "," + name + "," + product + "," + company + "," + risk + "," + industry + "," + type + "," + description;//这段用于拼接字符串并用于实现sql语句，报错原因暂时不明
	mysql_query(&_mysql, "insert into vulnerability values(total);");//这里可以利用total传参吗
	//mysql_query(&_mysql, "insert into vulnerability values(id=#{id}, name=#{name}, product=#{product}, company=#{company}, risk_level=#{risk_level}, industry=#{industry}, type_exist=#{type_exist}, description=#{description}); ");//本部分不确定正确性，回头问问m
	//mysql_query(&_mysql, "insert into vulnerability values(id, name, product, company, risk_level, industry, type_exist, description); ");一开始自己随便写的，估计不行
	//很明显这个函数不可行
}

int VulMysql::InsertMysql(std::string user, std::string password)
{
	mysql_query(&_mysql, "insert into user values(user,password);");

}

int VulMysql::ModifyMysql(int&& id,std::string&& type)
{
	switch (id)
	{
	case 1:mysql_query(&_mysql, "update id set id=type ");
		break;	//sql语句有问题，暂时不知道如何修改
	default:
		break;
	}
}
int VulMysql::UpdateMysql(int id)
{

}
int VulMysql::DeleteMysql(int id)
{

}

void VulMysql::FreeMysql()
{
	mysql_free_result(_res);  //释放一个结果集合使用的内存。
	mysql_close(&_mysql);	 //关闭一个服务器连接。
}